'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPrefixedKeyframes = getPrefixedKeyframes;
exports.getPrefixedStyle = getPrefixedStyle;

var _inlineStylePrefixer = require('inline-style-prefixer');

var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformValues(style) {
  return Object.keys(style).reduce(function (newStyle, key) {
    var value = style[key];
    if (Array.isArray(value)) {
      value = value.join(';' + key + ':');
    }
    newStyle[key] = value;
    return newStyle;
  }, {});
} /**
   * Based on https://github.com/jsstyles/css-vendor, but without having to
   * convert between different cases all the time.
   *
   * 
   */

var hasWarnedAboutUserAgent = false;
var lastUserAgent = undefined;
var prefixer = undefined;

function getPrefixer(userAgent) {
  var actualUserAgent = userAgent || global && global.navigator && global.navigator.userAgent;

  if (process.env.NODE_ENV !== 'production') {
    if (!actualUserAgent && !hasWarnedAboutUserAgent) {
      /* eslint-disable no-console */
      console.warn('Radium: userAgent should be supplied for server-side rendering. See ' + 'https://github.com/FormidableLabs/radium/tree/master/docs/api#radium ' + 'for more information.');
      /* eslint-enable no-console */
      hasWarnedAboutUserAgent = true;
    }
  }

  if (!prefixer || actualUserAgent !== lastUserAgent) {
    prefixer = new _inlineStylePrefixer2.default({ userAgent: actualUserAgent });
    lastUserAgent = actualUserAgent;
  }
  return prefixer;
}

function getPrefixedKeyframes(userAgent) {
  return getPrefixer(userAgent).prefixedKeyframes;
}

// Returns a new style object with vendor prefixes added to property names
// and values.
function getPrefixedStyle(style, userAgent) {
  var prefixer = getPrefixer(userAgent);
  var prefixedStyle = prefixer.prefix(style);
  var prefixedStyleWithFallbacks = transformValues(prefixedStyle);
  return prefixedStyleWithFallbacks;
}