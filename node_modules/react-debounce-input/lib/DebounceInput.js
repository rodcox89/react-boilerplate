'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _ReactComponentWithPureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var DebounceInput = _react2.default.createClass({
  displayName: 'DebounceInput',

  propTypes: {
    onChange: _react2.default.PropTypes.func.isRequired,
    onKeyDown: _react2.default.PropTypes.func,
    value: _react2.default.PropTypes.string,
    minLength: _react2.default.PropTypes.number,
    debounceTimeout: _react2.default.PropTypes.number,
    forceNotifyByEnter: _react2.default.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      minLength: 0,
      debounceTimeout: 100,
      forceNotifyByEnter: true
    };
  },
  getInitialState: function getInitialState() {
    return {
      value: this.props.value || ''
    };
  },
  componentWillMount: function componentWillMount() {
    this.createNotifier(this.props.debounceTimeout);
  },
  componentWillReceiveProps: function componentWillReceiveProps(_ref) {
    var value = _ref.value;
    var debounceTimeout = _ref.debounceTimeout;

    if (typeof value !== 'undefined' && this.state.value !== value) {
      this.setState({ value: value });
    }
    if (debounceTimeout !== this.props.debounceTimeout) {
      this.createNotifier(debounceTimeout);
    }
  },

  shouldComponentUpdate: _ReactComponentWithPureRenderMixin.shouldComponentUpdate,

  componentWillUnmount: function componentWillUnmount() {
    if (this.notify.cancel) {
      this.notify.cancel();
    }
  },
  createNotifier: function createNotifier(debounceTimeout) {
    if (debounceTimeout < 0) {
      this.notify = function () {
        return null;
      };
    } else if (debounceTimeout === 0) {
      this.notify = this.props.onChange;
    } else {
      this.notify = (0, _lodash2.default)(this.props.onChange, debounceTimeout);
    }
  },
  forceNotify: function forceNotify(event) {
    if (this.notify.cancel) {
      this.notify.cancel();
    }

    var value = this.state.value;
    var _props = this.props;
    var minLength = _props.minLength;
    var onChange = _props.onChange;

    if (value.length >= minLength) {
      onChange(event);
    } else {
      onChange(_extends({}, event, { target: _extends({}, event.target, { value: value }) }));
    }
  },
  onChange: function onChange(event) {
    var _this = this;

    event.persist();

    var oldValue = this.state.value;

    this.setState({ value: event.target.value }, function () {
      var value = _this.state.value;

      if (value.length >= _this.props.minLength) {
        _this.notify(event);
        return;
      }

      // If user hits backspace and goes below minLength consider it cleaning the value
      if (oldValue.length > value.length) {
        _this.notify(_extends({}, event, { target: _extends({}, event.target, { value: '' }) }));
      }
    });
  },
  render: function render() {
    var _this2 = this;

    var _props2 = this.props;
    var onChange = _props2.onChange;
    var v = _props2.value;
    var minLength = _props2.minLength;
    var debounceTimeout = _props2.debounceTimeout;
    var forceNotifyByEnter = _props2.forceNotifyByEnter;

    var props = _objectWithoutProperties(_props2, ['onChange', 'value', 'minLength', 'debounceTimeout', 'forceNotifyByEnter']);

    var onKeyDown = forceNotifyByEnter ? {
      onKeyDown: function onKeyDown(event) {
        if (event.key === 'Enter') {
          _this2.forceNotify(event);
        }
        // Invoke original onKeyDown if present
        if (_this2.props.onKeyDown) {
          _this2.props.onKeyDown(event);
        }
      }
    } : {};

    return _react2.default.createElement('input', _extends({ type: 'text'
    }, props, {
      value: this.state.value,
      onChange: this.onChange
    }, onKeyDown));
  }
});

exports.default = DebounceInput;
//# sourceMappingURL=DebounceInput.js.map